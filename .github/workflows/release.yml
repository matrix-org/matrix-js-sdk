name: Release Process
on:
    workflow_dispatch:
        inputs:
            mode:
                description: What type of release
                required: true
                default: rc
                type: choice
                options:
                    - rc
                    - final
            docs:
                description: Publish docs
                required: true
                type: boolean
                default: true
            npm:
                description: Publish to npm
                required: true
                type: boolean
                default: true
concurrency: ${{ github.workflow }}
jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            - name: Get draft release
              id: release
              uses: cardinalby/git-get-release-action@cedef2faf69cb7c55b285bad07688d04430b7ada # v1
              env:
                  GITHUB_TOKEN: ${{ github.token }}
              with:
                  draft: true
                  latest: true

            - uses: actions/checkout@v4
              with:
                  ref: staging
                  token: ${{ secrets.ELEMENT_BOT_TOKEN }}
                  fetch-depth: 0

            - uses: actions/setup-node@v3
              with:
                  cache: "yarn"

            - name: Install Deps
              run: "yarn install --frozen-lockfile"

            - name: Load version
              run: echo "VERSION=$VERSION" >> $GITHUB_ENV
              env:
                  VERSION: ${{ steps.release.outputs.tag_name }}

            - name: Finalise version
              if: inputs.mode == 'final'
              run: echo "VERSION=$(echo $VERSION | cut -d- -f1)" >> $GITHUB_ENV

            - name: Bump package.json version
              run: yarn version --no-git-tag-version --new-version "$VERSION"

            - name: Add to CHANGELOG.md
              if: inputs.mode == 'final'
              run: |
                  mv CHANGELOG.md CHANGELOG.md.old
                  HEADER="Changes in [${VERSION#v}](https://github.com/${{ github.repository }}/releases/tag/$VERSION) ($(date '+%Y-%m-%d'))"

                  {
                      echo "$HEADER"
                      printf '=%.0s' $(seq ${#HEADER})
                      echo ""
                      echo "$BODY"
                      echo ""
                  } > CHANGELOG.md

                  cat CHANGELOG.md.old >> CHANGELOG.md
                  rm CHANGELOG.md.old
              env:
                  BODY: ${{ steps.release.outputs.body }}

            # For the published and dist versions of the package,
            # we copy the `matrix_lib_main` and `matrix_lib_typings` fields to `main` and `typings` (if they exist).
            # This small bit of gymnastics allows us to use the TypeScript source directly for development without
            # needing to build before linting or testing.
            - name: Update package.json fields
              run: |
                  for i in main typings browser
                  do
                      lib_value=$(jq -r ".matrix_lib_$i" package.json)
                      if [ "$lib_value" != "null" ]; then
                          jq ".$i = .matrix_lib_$i" package.json > package.json.new && mv package.json.new package.json && yarn prettier --write package.json
                      fi
                  done

            - name: Set up git
              run: |
                  git config --global user.email "releases@riot.im"
                  git config --global user.name "RiotRobot"

            - name: Commit and push changes
              run: |
                  git add package.json CHANGELOG.md
                  git commit -m "$VERSION"
                  git push origin staging

            - name: Merge to master
              if: inputs.mode == 'final'
              run: |
                  git checkout master
                  git merge -X theirs staging
                  git push origin master

            - name: Publish release
              uses: actions/github-script@v6
              id: my-script
              env:
                  RELEASE_ID: ${{ steps.release.outputs.id }}
                  MODE: ${{ inputs.mode }}
              with:
                  result-encoding: string
                  retries: 3
                  script: |
                      let { RELEASE_ID: release_id, VERSION, MODE } = process.env;
                      const { owner, repo } = context.repo;

                      const opts = {
                          owner,
                          repo,
                          release_id,
                          tag_name: VERSION,
                          name: VERSION,
                          draft: false,
                      };

                      if (MODE === "final") {
                          opts.prerelease = false;
                          opts.make_latest = true;
                      }

                      github.rest.repos.updateRelease(opts);

    docs:
        name: Publish Documentation
        needs: release
        if: inputs.docs
        runs-on: ubuntu-latest
        steps:
            - name: ðŸ§® Checkout code
              uses: actions/checkout@v4

            - name: ðŸ§® Checkout gh-pages
              uses: actions/checkout@v4
              with:
                  ref: gh-pages
                  path: _docs

            - name: ðŸ”§ Yarn cache
              uses: actions/setup-node@v3
              with:
                  cache: "yarn"

            - name: ðŸ”¨ Install dependencies
              run: "yarn install --frozen-lockfile"

            - name: ðŸ”¨ Install symlinks
              run: |
                  sudo apt-get update
                  sudo apt-get install -y symlinks

            - name: ðŸ“– Generate docs
              run: |
                  yarn tpv purge --yes --out _docs --stale --major 10
                  yarn gendoc
                  symlinks -rc _docs

            - name: ðŸ”¨ Set up git
              run: |
                  git config --global user.email "releases@riot.im"
                  git config --global user.name "RiotRobot"

            - name: ðŸš€ Deploy
              run: |
                  git add . --all
                  git commit -m "Update docs"
                  git push
              working-directory: _docs

    npm:
        name: Publish
        needs: release
        if: inputs.npm
        uses: matrix-org/matrix-js-sdk/.github/workflows/release-npm.yml@develop
        secrets:
            NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
