name: SonarQube
on:
  workflow_run:
    workflows: [ "Tests" ]
    types:
      - completed
jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: "üßÆ Checkout code"
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_branch }} # checkout commit that triggered this workflow
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      # fetch develop so that Sonar can identify new issues in PR builds
      - name: "üìï Fetch develop"
        if: "github.event.workflow_run.head_branch != 'develop'"
        run: git rev-parse HEAD && git fetch origin develop:develop && git status && git rev-parse HEAD

      # There's a 'download artifact' action, but it hasn't been updated for the workflow_run action
      # (https://github.com/actions/download-artifact/issues/60) so instead we get this mess:
      - name: "üì• Download Coverage Report"
        uses: actions/github-script@v3.1.0
        with:
          script: |
            const artifacts = await github.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.event.workflow_run.id }},
            });
            const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
                return artifact.name == "coverage"
            })[0];
            const download = await github.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
            });
            const fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/coverage.zip', Buffer.from(download.data));

      - name: "üóÉÔ∏è Extract Coverage Report"
        run: unzip -d coverage coverage.zip && rm coverage.zip

      - name: "üîç Read latest tag"
        id: version
        uses: WyriHaximus/github-action-get-previous-tag@v1

      - name: "üîç Read PR details"
        id: prdetails
        if: github.event.workflow_run.event == 'pull_request'
        # We need to find the PR number that corresponds to the branch, which we do by searching the GH API
        # The workflow_run event includes a list of pull requests, but it doesn't get populated for
        # forked PRs: https://docs.github.com/en/rest/reference/checks#create-a-check-run
        run: |
          head_branch='${{github.event.workflow_run.head_repository.owner.login}}:${{github.event.workflow_run.head_branch}}'
          echo "Head branch: $head_branch"
          pulls_uri="https://api.github.com/repos/${{ github.repository }}/pulls?head=$(jq -Rr '@uri' <<<$head_branch)"
          pr_data=$(curl -s -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' "$pulls_uri")

          pr_number=$(jq -r '.[] | .number' <<< "$pr_data")
          echo "PR number: $pr_number"
          echo "::set-output name=prnumber::$pr_number"

          head_ref=$(jq -r '.[] | .head.ref' <<< "$pr_data")
          echo "Head ref: $head_ref"
          echo "::set-output name=headref::$head_ref"

          base_ref=$(jq -r '.[] | .base.ref' <<< "$pr_data")
          echo "Base ref: $base_ref"
          echo "::set-output name=baseref::$base_ref"

      - name: "ü©ª SonarCloud Scan"
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectVersion=${{ steps.version.outputs.tag }}
            -Dsonar.scm.revision=${{ github.event.workflow_run.head_sha }}
            -Dsonar.pullrequest.key=${{ steps.prdetails.outputs.prnumber }}
            -Dsonar.pullrequest.branch=${{ steps.prdetails.outputs.headref }}
            -Dsonar.pullrequest.base=${{ steps.prdetails.outputs.baseref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
