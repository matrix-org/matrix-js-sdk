/*
Copyright 2018 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
try {
    global.Olm = require('olm');
} catch (e) {
    console.warn("unable to run megolm cross-signing tests: libolm not available");
}

import expect from 'expect';
import Promise from 'bluebird';
// import anotherjson from 'another-json'; // needed for creating signatures

import sdk from '../../..';
import WebStorageSessionStore from '../../../lib/store/session/webstorage';
import MemoryCryptoStore from '../../../lib/crypto/store/memory-crypto-store.js';
import MockStorageApi from '../../MockStorageApi';
import testUtils from '../../test-utils';

import olmlib from '../../../lib/crypto/olmlib';

import DeviceInfo from '../../../lib/crypto/deviceinfo';
const DeviceVerification = DeviceInfo.DeviceVerification;

const Olm = global.Olm;

const MatrixClient = sdk.MatrixClient;

/* The devices used in the tests.
 *
 * The "pickle" properties are the pickled Olm accounts (with the empty string
 * as the key), so that more signatures can be generated if needed.  Signatures
 * are generated by doing something like:
 *
 *     attesterAccount.sign(anotherjson.stringify({
 *       user_id: "@attestee:example.com",
 *       device_id: "attesteedevice",
 *       keys: {
 *         "ed25519:attesteedevice": JSON.parse(attesteeAccount.identity_keys()).ed25519
 *       },
 *       state: "verified",
 *     }));
 */
const DEVICES = {
    "@alice:example.com": [
        // This is our device
        DeviceInfo.fromStorage({
            algorithms: [
                olmlib.MEGOLM_ALGORITHM,
                olmlib.OLM_ALGORITHM,
            ],
            keys: {
                "curve25519:ABCDEFG": "FWqvcCt1fS2Oe5Jyh1Q4SgNXS9Umpmz6teTMVmNqeEc",
                "ed25519:ABCDEFG": "vRxWICOpXOkfLGoMr5go7RolKtKeTEpAd9PKCApAfp4",
            },
            known: true,
            unsigned: {
                device_display_name: "PDP-11",
                attestations: [
                ],
            },
            verified: DeviceVerification.VERIFIED,
            pickle: "f5V1Yayfij/rgRqn1SYffoebtZdstSjToK2AwV9UAL1Rb7UehPw9JDQS77ny"
                + "JEWkrkE5O2IpWSvgp05nQCNaZR/zMJ+s/UZPGVtBN7oUCCpcnxww05XyWQt13y"
                + "1PFMrsv4Wtn2Mj+uTWumAAn9gjM8oi/r8yOi6L8tLw3BnyePq24HJddWiLaH5w"
                + "s0T3WUAu3dgKlfZhbzBZj0nq4SIzf8U1zGY3c9T6Zp75R4RuWaxsqQOj+uKgkA",
        }, "ABCDEFG"),
        // This device is verified, so it, and any attestations made by
        // it, are trusted
        DeviceInfo.fromStorage({
            algorithms: [
                olmlib.MEGOLM_ALGORITHM,
                olmlib.OLM_ALGORITHM,
            ],
            keys: {
                "curve25519:HIJKLMN": "jDcDGAsMPC0EA+iLgCyo4yumLX8gtSEhyynOcNAKqUY",
                "ed25519:HIJKLMN": "DobT9R38qjusdQ0AdI1mOcoaJ+allQjDdFiPwchuvcI",
            },
            known: true,
            unsigned: {
                device_display_name: "Osborne 2",
                attestations: [
                ],
            },
            verified: DeviceVerification.VERIFIED,
            pickle: "28KacEr0fhICLvDRj3FnzEH1ZCDCyzTI4o9ePyRY5ydzr6EQDt1QJAJVtm+r"
                + "j1p4MKqZXJEFbcUey5/8XT1X5tga0Auc77pXXu1qrni/ohTUPtuisexqDLM4k9"
                + "GKVruqL3BoyfczNKReQ+RugNygQLX+ilOo7ZXmKysj3qrgnfy6CjIzHoFZfiuX"
                + "nkEfrCRK6O5szhaxfUsUjpmU1Ke4oLYvdAurD8Q773E2uib8A0JRExjVP7Qr1g",
        }, "HIJKLMN"),
        // This device has an attestation from a verified device, so
        // should be trusted
        DeviceInfo.fromStorage({
            algorithms: [
                olmlib.MEGOLM_ALGORITHM,
                olmlib.OLM_ALGORITHM,
            ],
            keys: {
                "curve25519:OPQRSTU": "wyNM62/EQvxttaurc4Svmz2/ZDkB59LsvSGirSnrrTc",
                "ed25519:OPQRSTU": "HTWEvvc3ziTXKP832Atd7aWKWAhMImxNM0ALwxUmnok",
            },
            known: true,
            unsigned: {
                device_display_name: "Difference Engine",
                attestations: [
                    {
                        user_id: "@alice:example.com",
                        device_id: "OPQRSTU",
                        keys: {
                            "ed25519:OPQRSTU":
                            "HTWEvvc3ziTXKP832Atd7aWKWAhMImxNM0ALwxUmnok",
                        },
                        state: "verified",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:HIJKLMN":
                                "6rK8gCtuAzDhNhCQbkGFCtxSeL7wDPxPW8c9i5PepGKfVnSG"
                                    + "8Nf4bh1poxsysOsuXJS5zffpb61DCb4FcrnDBg",
                            },
                        },
                    },
                ],
            },
            verified: DeviceVerification.UNVERIFIED,
            pickle: "uSgABEW2QPSZNULky8qjscRPQQWq0rCu15k2/CbuCqo602xtNvRKGKyS8Bej"
                + "ayuoKzF7pOIiYJhu1iiLmXXi7QpVGSS8p69CqUZKpWLfT+IB2C2hCocjykkzMe"
                + "6hGmo/1IayZT4j51y5LtLAy9RTeaQly83MDzXYEqsJCUFe6YclwKA7gT1X+1le"
                + "o8vQ0NK9X6bf0RvG//VdIbckX0zY0dqcYFYX/SpddY7svR9y4u+Twwsenrr15Q",
        }, "OPQRSTU"),
        // This device has an attestation from a trusted device, but
        // also has a revocation, so should not be trusted
        DeviceInfo.fromStorage({
            algorithms: [
                olmlib.MEGOLM_ALGORITHM,
                olmlib.OLM_ALGORITHM,
            ],
            keys: {
                "curve25519:VWXYZAB": "q6D5seGtdBkkiGavU+NFSR46YD4K/lXfgnbuv87j2jo",
                "ed25519:VWXYZAB": "T0hD84V2/2dWbPhnczwfVATm1qUyOwRnSLyzAd8E17E",
            },
            known: true,
            unsigned: {
                device_display_name: "Abacus",
                attestations: [
                    {
                        user_id: "@alice:example.com",
                        device_id: "VWXYZAB",
                        keys: {
                            "ed25519:VWXYZAB":
                            "T0hD84V2/2dWbPhnczwfVATm1qUyOwRnSLyzAd8E17E",
                        },
                        state: "verified",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:HIJKLMN":
                                "KidHQf7M+OtL5RXCphWss7BP9oxzWrOrJdHbfE/Mx1mmpC3X"
                                    + "HcHLpaoQgBxOorIYabM7wP28C0UrN4DFBM9mCg",
                            },
                        },
                    },
                    {
                        user_id: "@alice:example.com",
                        device_id: "VWXYZAB",
                        keys: {
                            "ed25519:VWXYZAB":
                            "T0hD84V2/2dWbPhnczwfVATm1qUyOwRnSLyzAd8E17E",
                        },
                        state: "revoked",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:HIJKLMN":
                                "oIgUVvFOHCJmrhDeSNTFOKo8P7/Dk7jjgMhMhNsomRJ/GL9r"
                                    + "gzgq616vfEy91B1bVHpMTjp6BnXuIXBazwkkBg",
                            },
                        },
                    },
                ],
            },
            verified: DeviceVerification.UNVERIFIED,
            pickle: "7pd9EfDEOXNrkn2BLmvgAYuYY2A6EhueNwMqkAX5hRuCcAUi2pHIWFuCUQVL"
                + "bHoB+0tCSOPnFdjxkURkxWdbgsbrjsJcB+PO0O5u3MYUU/2ztMFz/yxuwgFB+W"
                + "G95OHUlRevB3X5jW7HGPZFffdD1YtU/XQ/WVDkmbfJsXVMAjnFEb0RS5G4F0iT"
                + "Nz5iQBS7w9ZZGDAUwYd4zL5GWN93jDSb3bzGenXPBEE2AUJxhc6gW5GyfUvfsA",
        }, "VWXYZAB"),
    ],
    "@bob:example.com": [
        // This device (from another user) is trusted by a trusted
        // device, and so should be trusted
        DeviceInfo.fromStorage({
            algorithms: [
                olmlib.MEGOLM_ALGORITHM,
                olmlib.OLM_ALGORITHM,
            ],
            keys: {
                "curve25519:CDEFGHI": "L/0POum8W0mJbJRuIQuGD8iGEE5kDPRYCzlVx2mKEzM",
                "ed25519:CDEFGHI": "+2nFvlv9nOst82iMJSesw1WO5ttnJBnG6Ca2rKBkuhs",
            },
            known: true,
            unsigned: {
                device_display_name: "Dynabook",
                attestations: [
                    {
                        user_id: "@bob:example.com",
                        device_id: "CDEFGHI",
                        keys: {
                            "ed25519:CDEFGHI":
                            "+2nFvlv9nOst82iMJSesw1WO5ttnJBnG6Ca2rKBkuhs",
                        },
                        state: "verified",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:OPQRSTU":
                                "YTlhBULYNgvl184RFht8a/TpTaS00bmisFOtRm0N1Ilv91Bb"
                                    + "eQxwtgANEKreW0Sn0vfBTbk+2ASzs5Qp8bfwAw",
                            },
                        },
                    },
                ],
            },
            verified: DeviceVerification.UNVERIFIED,
            pickle: "dTAYLb9b0DbPo/qtYGgSNkPbAlJM5HoTn0gdFYkeguvwXXZf0aKEuzwWjYkA"
                + "RLZA3p2r25ozI+BJmn/eJ9FuiAa43LSH7Bb/LcJAN8W9JS4ATy6W/+ZtwFYeUy"
                + "9H+8LHxqXSRLfV7kBOD3ykVTEqtFHlsZN9IRx1NNc93lJHRTxK8WUFopGilxdN"
                + "GCXvOiIQhkzdeNdq6/h3s9UW+ebzZO43ZVZB8NtWXooL3CFHIABUkhxzyk73hw",
        }, "CDEFGHI"),
        // This device (from another user) is trusted by a trusted
        // device belonging to that user, and so should be trusted
        DeviceInfo.fromStorage({
            algorithms: [
                olmlib.MEGOLM_ALGORITHM,
                olmlib.OLM_ALGORITHM,
            ],
            keys: {
                "curve25519:JKLMNOP": "4rE+udlUT/T+qB7cAdI//RsGPwuKuYomyKCTPZSxnzw",
                "ed25519:JKLMNOP": "Z3TwIQA1kmfDlru4pKHc7RiyNWAINWJVCgARL8paW3Y",
            },
            known: true,
            unsigned: {
                device_display_name: "VAX",
                attestations: [
                    {
                        user_id: "@bob:example.com",
                        device_id: "JKLMNOP",
                        keys: {
                            "ed25519:JKLMNOP":
                            "Z3TwIQA1kmfDlru4pKHc7RiyNWAINWJVCgARL8paW3Y",
                        },
                        state: "verified",
                        signatures: {
                            "@bob:example.com": {
                                "ed25519:CDEFGHI":
                                "pb2skKusGuWO5psFJ0qItriw5U4juETCoX9FTAdWnkRisEVs"
                                    + "pIy5QNkvebw4k/jSdNZ1IjWRdin3dM6Z/SGtBw",
                            },
                        },
                    },
                ],
            },
            verified: DeviceVerification.UNVERIFIED,
            pickle: "0qDUm7f6ijoA1HjGKrpZncjK2cJQTgxg+t+dJTgYJDDS/tNUTWT9GTzdYjT6"
                + "wjWt2bYpM6thC5SuCDi3rrWxVI3L/sXseMwkLdGHkzPDXU6/t7LqxCWh2xhiaU"
                + "gW5N5giPq/0OtItJHxdBpyXcFLv3DTRIWW26ir9UKz9OKrOutaV6DhnpnEntAl"
                + "djtbCsHiJFwddRjPbsS7WypJpd4fbs8waQTZZMjVbSdMoz1n6bIlN6n+DZ30jw",
        }, "JKLMNOP"),
        // This device (from another user) is verified, so should be
        // trusted without needing any attestations
        DeviceInfo.fromStorage({
            algorithms: [
                olmlib.MEGOLM_ALGORITHM,
                olmlib.OLM_ALGORITHM,
            ],
            keys: {
                "curve25519:QRSTUVW": "0ptVw0xjt+RpjcVGh08cXZe2DcnmOGlg2FRzSLE/3Cs",
                "ed25519:QRSTUVW": "kKDBb7XM0e8r432QkU5UV6Bag5A03BC2y+afne9OCgI",
            },
            known: true,
            unsigned: {
                device_display_name: "PADD",
                attestations: [
                ],
            },
            verified: DeviceVerification.VERIFIED,
            pickle: "O8wFok2Q7JEOdyg+YhKiBgyXHdD00/+6LFe26RecE7+nbhG9uwZcU+MGQRMj"
                + "BXDsGJTbxinjFZHcydf8QrRMe7JjPy2q6/SFcA7eKcQORfmCbLLewfNuXR5pR3"
                + "bkszjQXyAkYtUA/y9nhOdWQZDBhxwdJEd0ty8T+kqOnaUwv7b57gh9s1awODkC"
                + "EaPey8GmgkJdaN0UTmDqc5TCVGThEiF1kz3fBmV1+tvV7UeMhBciXPeBD9J+sg",
        }, "QRSTUVW"),
        // This device (from another user) is trusted by a verified
        // device, and so should be trusted.
        DeviceInfo.fromStorage({
            algorithms: [
                olmlib.MEGOLM_ALGORITHM,
                olmlib.OLM_ALGORITHM,
            ],
            keys: {
                "curve25519:XYZABCD": "Oqx2zdH0X0DZjqMNd60RIiaTztmde2eTlguAR8w3XQA",
                "ed25519:XYZABCD": "2NRmesj88leDYClUxEwosCATv81ERb7kDp/rSf6XHEg",
            },
            known: true,
            unsigned: {
                device_display_name: "Pascaline",
                attestations: [
                    {
                        user_id: "@bob:example.com",
                        device_id: "XYZABCD",
                        keys: {
                            "ed25519:XYZABCD":
                            "2NRmesj88leDYClUxEwosCATv81ERb7kDp/rSf6XHEg",
                        },
                        state: "verified",
                        signatures: {
                            "@bob:example.com": {
                                "ed25519:QRSTUVW":
                                "UccY1t3S65rF3MQyluhusOqndC1XRIYBTQJPALK8oO+JwG5J"
                                    + "d2LioWNfo23+azdDImU2v9QcEGzr2WeuKDZjAg",
                            },
                        },
                    },
                ],
            },
            verified: DeviceVerification.UNVERIFIED,
            pickle: "1Kn2abUPcCRerdW48ACL3qwJaEjqDybh0jyaUh9FDcPXd3Qwbiyrp8RUVnpW"
                + "UwB//h5BYAntK+1CfDG4SqT6JueCRXUWrjIC+HOnbW8vpE9FqpO1O0gJYp+0Ma"
                + "ECd13AENoJTOCMRl+ad1aSUbZ++Opv+AGbYNTEzyEHjp5TwRCFKMFKXPOcX4do"
                + "hNT+cFzlss0yAPakehbIUMmaDd0+yAqO5mYLXb6hOkW34UKRVg+lEwHzDvwGSA",
        }, "XYZABCD"),
        // This device (from another user) has many attestations, but all of
        // them invalid/untrusted in some way, so should not be trusted
        DeviceInfo.fromStorage({
            algorithms: [
                olmlib.MEGOLM_ALGORITHM,
                olmlib.OLM_ALGORITHM,
            ],
            keys: {
                "curve25519:LMNOPQR": "didKaJCr5lizfTbQ/+xy8GWApQqFmMmU1NNzqMWybEk",
                "ed25519:LMNOPQR": "vRKZt3U2zbnmsJ3tpoKmfxb9/lh8UdFW3kKqP9Hqc4Q",
            },
            known: true,
            unsigned: {
                device_display_name: "Curta",
                attestations: [
                    // wrong username
                    {
                        user_id: "@carol:example.com",
                        device_id: "EFGHIJK",
                        keys: {
                            "ed25519:EFGHIJK":
                            "vRKZt3U2zbnmsJ3tpoKmfxb9/lh8UdFW3kKqP9Hqc4Q",
                        },
                        state: "verified",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:HIJKLMN":
                                "rcpZCxJhf3go6vleDYgD19rKxP4addHNTrTVMuxgGeEKw9NX"
                                    + "Mhvl72vjpBmcJqw+FE7BLgRxWkkseA/9PZqVAA",
                            },
                        },
                    },
                    // wrong device ID
                    {
                        user_id: "@bob:example.com",
                        device_id: "LMNOPQR",
                        keys: {
                            "ed25519:EFGHIJK":
                            "vRKZt3U2zbnmsJ3tpoKmfxb9/lh8UdFW3kKqP9Hqc4Q",
                        },
                        state: "verified",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:HIJKLMN":
                                "UG2nBhq8t/aSUwJOO0uNg94l0M7CrERV8VxJw+mm8N02aREl"
                                    + "oSA8gF4ZmNGXA2PnE+lkDjT6YdGLrM56XxEEBg",
                            },
                        },
                    },
                    // not signing key
                    {
                        user_id: "@bob:example.com",
                        device_id: "EFGHIJK",
                        keys: {
                            "curve25519:EFGHIJK":
                            "didKaJCr5lizfTbQ/+xy8GWApQqFmMmU1NNzqMWybEk",
                        },
                        state: "verified",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:HIJKLMN":
                                "j8RjjEkTFZ7BxJiPr0soYvv7afk3SOE5g8Aj+yl/esBoyjmB"
                                    + "UZgXTJkNxulGKk6iQctEcNkUhWwRBreJR68qCQ",
                            },
                        },
                    },
                    // no state
                    {
                        user_id: "@bob:example.com",
                        device_id: "EFGHIJK",
                        keys: {
                            "ed25519:EFGHIJK":
                            "vRKZt3U2zbnmsJ3tpoKmfxb9/lh8UdFW3kKqP9Hqc4Q",
                        },
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:HIJKLMN":
                                "qGe+lkuM1EPaz6e9EtCRoUw9bT9qoXP5xTsYhOOKNaeJoMKe"
                                    + "tSBLBgzr6VzmiMAMz1xW2arQDlFX9+B4+OhyAA",
                            },
                        },
                    },
                    // sig from untrusted device
                    {
                        user_id: "@bob:example.com",
                        device_id: "EFGHIJK",
                        keys: {
                            "ed25519:EFGHIJK":
                            "vRKZt3U2zbnmsJ3tpoKmfxb9/lh8UdFW3kKqP9Hqc4Q",
                        },
                        state: "verified",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:VWXYZAB":
                                "0yC5zQ7HU4IlQMfFTA4ohF13Us/UHc3nlwIMWRZ60TWE6Ipb"
                                    + "3OLm7AtPdzNp5E3KufKPOsClNnjPiiDKD1pYCA",
                            },
                        },
                    },
                    // sig from unknown device
                    {
                        user_id: "@bob:example.com",
                        device_id: "EFGHIJK",
                        keys: {
                            "ed25519:EFGHIJK":
                            "vRKZt3U2zbnmsJ3tpoKmfxb9/lh8UdFW3kKqP9Hqc4Q",
                        },
                        state: "verified",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:LMNOPQR":
                                "lsSjKOe2SEy5YTT3tmERc5mTmGT42V0yfFA1s/u7s+l5aq82"
                                    + "RWni5ZBAIdjeBJ/z6sZ5PiYVNHviHpSG+UQiDw",
                            },
                        },
                    },
                    // bad signature
                    {
                        user_id: "@bob:example.com",
                        device_id: "EFGHIJK",
                        keys: {
                            "ed25519:EFGHIJK":
                            "vRKZt3U2zbnmsJ3tpoKmfxb9/lh8UdFW3kKqP9Hqc4Q",
                        },
                        state: "verified",
                        signatures: {
                            "@alice:example.com": {
                                "ed25519:HIJKLMN": "thisIsAnInvalidSignature",
                            },
                        },
                    },
                ],
            },
            verified: DeviceVerification.UNVERIFIED,
        }, "EFGHIJK"),
    ],
};

describe("MegolmBackup", function() {
    if (!global.Olm) {
        console.warn('Not running megolm backup unit tests: libolm not present');
        return;
    }

    let mockStorage;
    let sessionStore;
    let cryptoStore;
    let client;
    beforeEach(async function() {
        await Olm.init();
        testUtils.beforeEach(this); // eslint-disable-line no-invalid-this

        mockStorage = new MockStorageApi();
        sessionStore = new WebStorageSessionStore(mockStorage);
        cryptoStore = new MemoryCryptoStore(mockStorage);

        const scheduler = [
            "getQueueForEvent", "queueEvent", "removeEventFromQueue",
            "setProcessFunction",
        ].reduce((r, k) => {r[k] = expect.createSpy(); return r;}, {});
        const store = [
            "getRoom", "getRooms", "getUser", "getSyncToken", "scrollback",
            "save", "wantsSave", "setSyncToken", "storeEvents", "storeRoom",
            "storeUser", "getFilterIdByName", "setFilterIdByName", "getFilter",
            "storeFilter", "getSyncAccumulator", "startup", "deleteAllData",
        ].reduce((r, k) => {r[k] = expect.createSpy(); return r;}, {});
        store.getSavedSync = expect.createSpy().andReturn(Promise.resolve(null));
        store.getSavedSyncToken = expect.createSpy().andReturn(Promise.resolve(null));

        client = new MatrixClient({
            baseUrl: "https://my.home.server",
            idBaseUrl: "https://identity.server",
            accessToken: "my.access.token",
            request: function() {}, // NOP
            store: store,
            scheduler: scheduler,
            userId: "@alice:example.com",
            deviceId: "ABCDEFG",
            sessionStore: sessionStore,
            cryptoStore: cryptoStore,
        });

        await client.initCrypto();

        client._crypto._deviceList = {
            getStoredDevicesForUser: function(userId) {
                return DEVICES[userId] || [];
            },
        };
    });

    it("should check cross-signing", async function() {
        expect(await client.getDeviceTrust("@alice:example.com", "ABCDEFG"))
            .toBe(DeviceVerification.VERIFIED);
        expect(await client.getDeviceTrust("@alice:example.com", "HIJKLMN"))
            .toBe(DeviceVerification.VERIFIED);
        expect(await client.getDeviceTrust("@alice:example.com", "OPQRSTU"))
            .toBe(DeviceVerification.TRUSTED_BY_US);
        expect(await client.getDeviceTrust("@alice:example.com", "VWXYZAB"))
            .toBe(DeviceVerification.UNVERIFIED);

        expect(await client.getDeviceTrust("@bob:example.com", "CDEFGHI"))
            .toBe(DeviceVerification.TRUSTED_BY_US);
        expect(await client.getDeviceTrust("@bob:example.com", "JKLMNOP"))
            .toBe(DeviceVerification.TRUSTED_BY_THEM);
        expect(await client.getDeviceTrust("@bob:example.com", "QRSTUVW"))
            .toBe(DeviceVerification.VERIFIED);
        expect(await client.getDeviceTrust("@bob:example.com", "XYZABCD"))
            .toBe(DeviceVerification.TRUSTED_BY_THEM);
        expect(await client.getDeviceTrust("@bob:example.com", "EFGHIJK"))
            .toBe(DeviceVerification.UNVERIFIED);
    });
});
